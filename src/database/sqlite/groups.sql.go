// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: groups.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
    group_name, description, uuid_list, date_added, date_updated
) VALUES (
    ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING id, group_name, description, uuid_list, date_added, date_updated
`

type CreateGroupParams struct {
	GroupName   string
	Description sql.NullString
	UuidList    string
}

// Creates a new group
func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.GroupName, arg.Description, arg.UuidList)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Description,
		&i.UuidList,
		&i.DateAdded,
		&i.DateUpdated,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups WHERE id = ?
`

// Delete a group by its ID
func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getAllGroups = `-- name: GetAllGroups :many
SELECT id, group_name, description, uuid_list, date_added, date_updated FROM groups ORDER BY date_added DESC
`

// Get all groups
func (q *Queries) GetAllGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.GroupName,
			&i.Description,
			&i.UuidList,
			&i.DateAdded,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, group_name, description, uuid_list, date_added, date_updated FROM groups WHERE id = ?
`

// Get a group by its ID
func (q *Queries) GetGroupByID(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Description,
		&i.UuidList,
		&i.DateAdded,
		&i.DateUpdated,
	)
	return i, err
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE groups
SET group_name = ?, description = ?, uuid_list = ?, date_updated = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateGroupParams struct {
	GroupName   string
	Description sql.NullString
	UuidList    string
	ID          int64
}

// Updates a group's details
func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateGroup,
		arg.GroupName,
		arg.Description,
		arg.UuidList,
		arg.ID,
	)
	return err
}
